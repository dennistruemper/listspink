name: CI for feature branches on pullrequest

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  CI: true
on:
  pull_request:
    branches: [main]

jobs:
  pullrequest-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3.3.2
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - name: Install bun
        uses: oven-sh/setup-bun@v1
      - name: bun install
        run: bun install --frozen-lockfile
        working-directory: . # use the root directory

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(cat package.json | jq -r '.devDependencies."@playwright/test"')" >> $GITHUB_ENV
        working-directory: . # use the root directory
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: lint
        run: bun run lint
        working-directory: . # use the root directory
      - name: build
        run: bun run build
      - name: local test all packages
        run: bun run test-local
        working-directory: . # use the root directory

      - name: deploy backend
        env:
          AMPT_API_KEY: ${{ secrets.AMPT_API_KEY }}
        id: deploy-backend
        working-directory: . # use the root directory
        run: |
          url=$(./scripts/deployAndGetUrl.sh ci)
          echo aha $url
          echo "BACKEND_URL=$url" >> "$GITHUB_OUTPUT"

      - name: test backend integration
        env:
          AMPT_API_KEY: ${{ secrets.AMPT_API_KEY }}
        id: backend-integration-test
        working-directory: . # use the root directory
        run: |
          bun x ampt run test --test-stage

      - name: Pull Vercel Environment Information
        run: bunx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: PUBLIC_BACKEND_URL=${{ steps.deploy-backend.outputs.BACKEND_URL}} PUBLIC_STAGE=dev bunx vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        id: deploy-frontend
        run: |
          url=$(bunx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "FRONTEND_URL=$url" >> "$GITHUB_OUTPUT"
      - name: Install Playwright Browsers
        run: bunx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Install Playwright Dependencies
        run: bunx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: run end to end tests
        run: FRONTEND_URL=${{ steps.deploy-frontend.outputs.FRONTEND_URL}} bun run test:e2e
