name: CI for feature branches on pullrequest

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  CI: true
on:
  pull_request:
    branches: [main]

jobs:
  pullrequest-job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3.3.1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Use Node.js
        uses: actions/setup-node@v3.6.0
        with:
          node-version-file: .nvmrc
      - name: npm install
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: lint
        run: npm run lint
      - name: build
        run: npm run build
      - name: unit-test
        run: npm run test:unit
      - name: Pull Vercel Environment Information
        run: npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: npx vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        id: deploy-frontend
        run: |
          url=$(npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "FRONTEND_URL=$url" >> "$GITHUB_OUTPUT"
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Install Playwright Dependencies
        run: npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: run end to end tests
        run: FRONTEND_URL=${{ steps.deploy-frontend.outputs.FRONTEND_URL}} npm run test:e2e
